######################################################
#Bio-statistics course in R - Week 6
######################################################

# use a simple two dimensional dataset to illustrate PCA
#https://davetang.org/muse/2012/02/01/step-by-step-principal-components-analysis-using-r/

x <- c(2.5, 0.5, 2.2, 1.9, 3.1, 2.3, 2, 1, 1.5, 1.1)
y <- c(2.4, 0.7, 2.9, 2.2, 3.0, 2.7, 1.6, 1.1, 1.6, 0.9)

plot(x, y, pch = 19)

# standardisation, where the dimensions now have a mean of zero.
mean(x)
# [1] 1.81
mean(y)
# [1] 1.91

x1 <- x - mean(x)
x1
# [1]  0.69 -1.31  0.39  0.09  1.29  0.49  0.19 -0.81 -0.31 -0.71
summary(x1)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#-1.310  -0.610   0.140   0.000   0.465   1.290

y1 <- y - mean(y)
y1
# [1]  0.49 -1.21  0.99  0.29  1.09  0.79 -0.31 -0.81 -0.31 -1.01
summary(y1)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#-1.210  -0.685  -0.010   0.000   0.715   1.090

plot(x1, y1, pch = 19)

#covariance matrix contains all covariance measures between all dimensions
cov(x1, y1)
#[1] 0.6154444

cov(x1, x1)
#[1] 0.6165556

cov(y1, y1)
#[1] 0.7165556

m <- matrix(c(cov(x1, x1), cov(x1, y1), cov(y1, x1),cov(y1, y1)),
            nrow=2,
            ncol=2,
            byrow=TRUE,
            dimnames=list(c("x","y"),c("x","y")))

m
#           x         y
# x 0.6165556 0.6154444
# y 0.6154444 0.7165556

#find the eigenvector and eigenvalues of the covariance matrix

e <- eigen(m)
e
# eigen() decomposition
# $values
# [1] 1.2840277 0.0490834
#
# $vectors
#           [,1]       [,2]
# [1,] 0.6778734 -0.7351787
# [2,] 0.7351787  0.6778734

#The largest eigenvalue is the first principal component; we multiply the standardised values to the first eigenvector, which is stored in e$vectors[,1].
pc1 <- x1 * e$vectors[1,1] + y1 * e$vectors[2,1]
pc1
#  [1]  0.82797019 -1.77758033  0.99219749  0.27421042  1.67580142  0.91294910 -0.09910944 -1.14457216 -0.43804614
# [10] -1.22382056

pc2 <- x1 * e$vectors[1,2] + y1 * e$vectors[2,2]
pc2
#  [1] -0.17511531  0.14285723  0.38437499  0.13041721 -0.20949846  0.17528244 -0.34982470  0.04641726  0.01776463
# [10] -0.16267529

data.frame(PC1 = pc1, PC2 = pc2)
#            PC1         PC2
# 1   0.82797019 -0.17511531
# 2  -1.77758033  0.14285723
# 3   0.99219749  0.38437499
# 4   0.27421042  0.13041721
# 5   1.67580142 -0.20949846
# 6   0.91294910  0.17528244
# 7  -0.09910944 -0.34982470
# 8  -1.14457216  0.04641726
# 9  -0.43804614  0.01776463
# 10 -1.22382056 -0.16267529

par(mfrow=c(1,2))
plot(x, y, pch = 19)
plot(pc1, pc2, pch = 19)

#Now to perform PCA using the prcomp() function.

data <- data.frame(x,y)
data.pca <- prcomp(data)
data.pca
# Standard deviations (1, .., p=2):
# [1] 1.1331495 0.2215477
#
# Rotation (n x k) = (2 x 2):
#          PC1        PC2
# x -0.6778734  0.7351787
# y -0.7351787 -0.6778734

names(data.pca)
# [1] "sdev"     "rotation" "center"   "scale"    "x"

data.pca$x
#              PC1         PC2
# [1,] -0.82797019  0.17511531
# [2,]  1.77758033 -0.14285723
# [3,] -0.99219749 -0.38437499
# [4,] -0.27421042 -0.13041721
# [5,] -1.67580142  0.20949846
# [6,] -0.91294910 -0.17528244
# [7,]  0.09910944  0.34982470
# [8,]  1.14457216 -0.04641726
# [9,]  0.43804614 -0.01776463
#[10,]  1.22382056  0.16267529

plot(-1*data.pca$x[,1], -1*data.pca$x[,2], pch = 19)

data.pca2 <- princomp(data)

#prcomp() and princomp()
#http://www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/118-principal-component-analysis-in-r-prcomp-vs-princomp/

install.packages("factoextra")
#Load the data and extract only active individuals and variables:




library("factoextra")
data(decathlon2)
cor.test(decathlon2$Rank,decathlon2$Points,method="spearman")
cor.test(decathlon2$X400m,decathlon2$X100m,method="spearman")
cor.test(decathlon2$X1500m,decathlon2$X100m,method="kendall")


decathlon2.active <- decathlon2[1:23, 1:10]
head(decathlon2.active[, 1:6])

princomp(decathlon2.active)->decprin_comp

plot(decprin_comp$scores[,1],decprin_comp$scores[,2])

#compute PCA
res.pca <- prcomp(decathlon2.active, scale = TRUE)
#Visualize eigenvalues (scree plot). Show the percentage of variances explained by each principal component.
fviz_eig(res.pca)

#Graph of individuals. Individuals with a similar profile are grouped together.
fviz_pca_ind(res.pca,
             col.ind = "cos2", # Color by the quality of representation
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE     # Avoid text overlapping
)

#Graph of variables. Positive correlated variables point to the same side of the plot. Negative correlated variables point to opposite sides of the graph.
fviz_pca_var(res.pca,
             col.var = "contrib", # Color by contributions to the PC
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE     # Avoid text overlapping
)

#Biplot of individuals and variables
fviz_pca_biplot(res.pca, repel = TRUE,
                col.var = "#2E9FDF", # Variables color
                col.ind = "#696969"  # Individuals color
)

#use of PCATools package for more options
#https://bioconductor.org/packages/devel/bioc/vignettes/PCAtools/inst/doc/PCAtools.html

install.packages('BiocManager')

BiocManager::install('PCAtools')

library(PCAtools)

res.pca <- pca(t(decathlon2.active), removeVar = 0.1)

screeplot(res.pca, axisLabSize = 18, titleLabSize = 22)

library(ggplot2)

horn <- parallelPCA(decathlon2.active)
horn$n

elbow <- findElbowPoint(res.pca$variance)
elbow

screeplot(res.pca,
          components = getComponents(res.pca, 1:20),
          vline = c(horn$n, elbow)) +
  geom_label(aes(x = horn$n + 1, y = 50,
                 label = 'Horn\'s', vjust = -1, size = 8)) +
  geom_label(aes(x = elbow + 1, y = 50,
                 label = 'Elbow method', vjust = -1, size = 8))

biplot(res.pca)

biplot(res.pca, showLoadings = TRUE,
       labSize = 5, pointSize = 5, sizeLoadingsNames = 5)

pairsplot(res.pca)

plotloadings(res.pca, labSize = 3)

##############PCA on the Pokemon dataset##########
setwd("E:/Courses/Biostatistics/GapMinderData")

read.csv(file="../pokemon.csv",header=T)->P

pokemon_edit<-P
pokemon_edit[,unlist(lapply(pokemon_edit,is.numeric))]->pokemon_num
pokemon_edit[,"name"]->name
row.names(pokemon_num)<-name
pokemon_num[is.na(pokemon_num)] <- 0

str(pokemon_num)

library(factoextra)

res.pca <- prcomp(pokemon_num, scale = TRUE)
#Visualize eigenvalues (scree plot). Show the percentage of variances explained by each principal component.
fviz_eig(res.pca)

#Graph of individuals. Individuals with a similar profile are grouped together.
fviz_pca_ind(res.pca,
             col.ind = "cos2", # Color by the quality of representation
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE     # Avoid text overlapping
)